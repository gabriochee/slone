----- Ce fichier n'a aucune utilité technique et n'est qu'un fichier de notes personnels. -----


PARSER :
    Définir les expressions et les statements :
        EXPRESSION : Retourne une valeur. Elle est composée de divers opérateurs mais une expression retournera
                     toujours une valeur.
			   Une expression peut se composer d'autres expressions.
			   Exemple : 3 + 9
        
	  STATEMENT  : Fait quelque chose. C'est du code qui execute une instruction particulière qui demande à
                     l'ordinateur de faire quelque chose, il contrôle la logique et la direction du programme.
			   Un statement ne peut pas être composé d'autres statements mais de plusieurs expressions.
			   Exemple : var1 = 3 + 9
	  
	  La différence MAJEURE sont les effets de bords : Un statement a des effets de bords tandis qu'une expression
	  n'en a pas.

	SRC : https://www.baeldung.com/cs/expression-vs-statement
		https://www.quora.com/What-is-the-difference-between-expression-and-statement-in-functional-programming

Définir ces concepts :
	EXPRESSION possède un type :
		- Value => Valeur unique
		- BinaryOperator => 2 valeurs, un opérateur
		- FunctionCall => Appel de fonction

	STATEMENT possède un type :
		- Assignment
		- ConditionalBranch (If/Else)
		- DefiniteBoucle	  (For)
		- IndefiniteBoucle  (While)
		- BoucleInstruction (Continue/Break)

Régles du parser:

	Méthode de parcours : Descente récursive.

	n = 9;

PARSE (){
  next_block = PARSE(NextToken)
  
}

PARSE "NAME" n <--- C'est un assignement où j'assigne la variable n
|                 |
--> PARSE "EQUAL" = <--- C'est bien une expression donc je renvoie un ASSIGNMENT
    |                  |
    --> PARSE "NUMBER" 9 <----- Je suis le dernier donc je renvoie VALUE
        |		      |
        --> PARSE "SEMICOLON" |

if (n == 9) {
	...
}

Syntaxe IF CONDITION [BLOC SI] ? [BLOC SINON]

PARSE IF
|
--> PARSE EXPRESSION [ 
    PARSE (
    |
    --> PARSE NAME n <----------- Ce qui vient après est une comparaison avec n !
        |			|
        --> PARSE = <------------ J'ai un égal qui suit, c'est donc une comparaison
            |			|
            --> PARSE = <-------- J'ai une valeur qui suit, c'est bon valide.
                |               |
                --> PARSE VALUE 9 <--- Je renvoie la value 9
                    |		     |
                    --> PARSE ) -----| J'arrive à la fin de l'expression
    ]
|
--> PARSE BLOC [
 ...
]

	Typage dynamique (les variables peuvent changer de type)
	
	Un bloc uniquement composé d'expressions est lui même une expression.
	Un bloc avec au moins un statement est un statement.

	() = Expression avec valeur de retour X PAS DE STATEMENTS LA DEDANS !!!
	{} = Nouveau bloc avec nouveau scope, STATEMENT

	STATEMENTS
	  ASSIGNMENT
	   Interdit de mettre un statement comme valeur
	  
	  IF
	   Interdit de mettre un statement dans la condition

	  BOUCLE FOR
	   Interdit de mettre des statements dans la condition et dans l'instruction de MAJ
	
	  BOUCLE WHILE
	   Interdit de mettre un statement dans la condition
	
	EXPRESSIONS
	  Une expression ne doit PAS contenir de statements


